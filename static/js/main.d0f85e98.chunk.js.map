{"version":3,"sources":["CustomSelect.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","SelectedItem","SelectItems","SelectItem","DownCaret","span","UpCaret","CustomSelect","options","uniqueId","label","useState","isOpen","setIsOpen","selectedOption","setSelectedOption","containerRef","useRef","selectItemsRef","selectedItemRef","itemRefs","activeItemRef","useCallback","find","item","innerHTML","activeItemRefIndex","findIndex","useEffect","current","style","display","width","offsetWidth","setAttribute","id","handleMouseDown","e","contains","target","window","addEventListener","removeEventListener","focus","scrollToItem","toggleIsOpen","scrollHeight","clientHeight","scrollBottom","scrollTop","elementBottom","offsetTop","offsetHeight","handleEscape","handleEnter","preventDefault","handleArrowUp","prevItem","handleArrowDown","nextItem","onSelectKeyDown","keyListenerMap","Map","handler","get","key","ref","tabIndex","onClick","onKeyDown","aria-expanded","aria-labelledby","aria-haspopup","role","map","option","index","value","aria-selected","App","Math","ceil","random","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0f85e98.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled(\"div\")`\r\n  position: relative;\r\n  display: inline-block;\r\n`;\r\n\r\nconst SelectedItem = styled(\"button\")`\r\n  padding: 0.2em;\r\n  display: inline-block;\r\n  border: 1px solid black;\r\n  margin: 0;\r\n  text-decoration: none;\r\n  background: #ffffff;\r\n  font-family: sans-serif;\r\n  font-size: 1em;\r\n  cursor: pointer;\r\n  border-radius: 0;\r\n  text-align: left;\r\n`;\r\n\r\nconst SelectItems = styled(\"ul\")`\r\n  margin: 0;\r\n  padding 0;\r\n  height: 7em;\r\n  overflow: auto;\r\n  list-style: none;\r\n  position: absolute;\r\n  background: #ffffff;\r\n  border: 1px solid black;\r\n  border-top-width: 0;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst SelectItem = styled(\"li\")`\r\n  padding: 0.2em;\r\n  cursor: pointer;\r\n  &[aria-selected=\"true\"] {\r\n    background-color: #b0f2ff;\r\n  }\r\n`;\r\n\r\nconst DownCaret = styled.span`\r\n  height: 1em;\r\n  position: absolute;\r\n  right: 0.2em;\r\n`;\r\n\r\nconst UpCaret = styled(DownCaret)``;\r\n\r\nfunction CustomSelect({options, uniqueId, label}) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [selectedOption, setSelectedOption] = useState(options[0]);\r\n  const containerRef = useRef();\r\n  const selectItemsRef = useRef();\r\n  const selectedItemRef = useRef();\r\n  const itemRefs = [];\r\n  const activeItemRef = useCallback(() => \r\n    itemRefs.find(item => item.innerHTML === selectedOption), \r\n    [itemRefs, selectedOption]\r\n  );\r\n  const activeItemRefIndex = useCallback(() => \r\n    itemRefs.findIndex(item => item.innerHTML === selectedOption), \r\n    [itemRefs, selectedOption]\r\n  );\r\n\r\n  //set dropdown button width equal to width of listbox underneath\r\n  useEffect(() => {\r\n    selectItemsRef.current.style.display = '';\r\n    selectedItemRef.current.style.width = `${selectItemsRef.current.offsetWidth}px`;\r\n    selectItemsRef.current.style.display = 'none';\r\n  },[selectItemsRef])\r\n\r\n  //set aria-activedescendant of listbox to currently selected item\r\n  useEffect(() => {\r\n    selectItemsRef.current.setAttribute('aria-activedescendant', activeItemRef?.id);\r\n  },[selectedOption, activeItemRef])\r\n\r\n  //close listbox on click outside of component\r\n  useEffect(() => {\r\n    const handleMouseDown = e => {\r\n      if (!(containerRef.current.contains(e.target)))\r\n        setIsOpen(false);\r\n    }\r\n    if(isOpen) {\r\n      window.addEventListener(\"mousedown\", handleMouseDown);\r\n    }\r\n    return () => {\r\n      window.removeEventListener(\"mousedown\", handleMouseDown);\r\n    };\r\n  },[isOpen])\r\n\r\n  //when listbox is open, focus on it and scroll to active item\r\n  useEffect(() => {\r\n    if(isOpen) {\r\n      selectItemsRef.current.focus();\r\n      scrollToItem(activeItemRef());\r\n    }\r\n  },[isOpen, activeItemRef])\r\n\r\n  const toggleIsOpen = () => {\r\n    setIsOpen(!isOpen);\r\n  }\r\n\r\n  const onOptionClicked = value => e => {\r\n    setSelectedOption(value);\r\n    scrollToItem(e.target);\r\n  }\r\n\r\n  const scrollToItem = item => {\r\n    if (selectItemsRef.current.scrollHeight <= selectItemsRef.current.clientHeight)\r\n      return;\r\n    let scrollBottom = selectItemsRef.current.clientHeight + selectItemsRef.current.scrollTop;\r\n    let elementBottom = item.offsetTop + item.offsetHeight;\r\n    if (elementBottom > scrollBottom)\r\n      selectItemsRef.current.scrollTop = elementBottom - selectItemsRef.current.clientHeight;\r\n    else if (item.offsetTop < selectItemsRef.current.scrollTop)\r\n      selectItemsRef.current.scrollTop = item.offsetTop;\r\n  }\r\n\r\n  const handleEscape = e => {\r\n    setIsOpen(false);\r\n    selectedItemRef.current.focus();\r\n  }\r\n\r\n  const handleEnter = e => {\r\n    e.preventDefault();\r\n    toggleIsOpen();\r\n    selectedItemRef.current.focus();\r\n  }\r\n\r\n  const handleArrowUp = e => {\r\n    e.preventDefault();\r\n    let prevItem = itemRefs[activeItemRefIndex() - 1];\r\n    if(prevItem) {\r\n      setSelectedOption(prevItem.innerHTML);\r\n      scrollToItem(prevItem);\r\n    }\r\n  }\r\n\r\n  const handleArrowDown = e => {\r\n    e.preventDefault();\r\n    let nextItem = itemRefs[activeItemRefIndex() + 1];\r\n    if(nextItem) {\r\n      setSelectedOption(nextItem.innerHTML);\r\n      scrollToItem(nextItem);\r\n    }\r\n  }\r\n\r\n  //keydown event listener for dropdown button and listbox\r\n  const onSelectKeyDown = (() => {\r\n    const keyListenerMap = new Map([\r\n      ['Escape', handleEscape],\r\n      ['Enter', handleEnter],\r\n      ['ArrowUp', handleArrowUp],\r\n      ['ArrowDown', handleArrowDown]\r\n    ])\r\n    return e => {\r\n      let handler = keyListenerMap.get(e.key);\r\n      return handler && handler(e);\r\n    }\r\n  })();\r\n\r\n  return (\r\n    <>\r\n      <span id={`custom-select-label-${uniqueId}`}>{label}</span>\r\n      <Container ref={containerRef}>\r\n        <SelectedItem id={`selected_item_${uniqueId}`}\r\n                      tabIndex='0'\r\n                      onClick={toggleIsOpen}\r\n                      onKeyDown={onSelectKeyDown}\r\n                      aria-expanded={isOpen ? true : false}\r\n                      aria-labelledby={`custom-select-label-${uniqueId} selected_item_${uniqueId}`}\r\n                      aria-haspopup='listbox'\r\n                      ref={selectedItemRef}>\r\n          {selectedOption}\r\n          {isOpen ? (\r\n            <UpCaret>&#9650;</UpCaret>\r\n          ) : (\r\n            <DownCaret>&#9660;</DownCaret>\r\n          )}\r\n        </SelectedItem>\r\n        <SelectItems role='listbox'\r\n                    aria-labelledby={`custom-select-label-${uniqueId}`}\r\n                    tabIndex='-1'\r\n                    style={{display: !isOpen && 'none'}}\r\n                    onKeyDown={onSelectKeyDown}\r\n                    ref={selectItemsRef}>\r\n          {options.map((option, index) => (\r\n            <SelectItem id={`select-item-${uniqueId}${index}`}\r\n                        role='option'\r\n                        onClick={onOptionClicked(option)}\r\n                        key={index}\r\n                        aria-selected={option === selectedOption}\r\n                        ref={ref => itemRefs[index] = ref}>\r\n              {option}\r\n            </SelectItem>\r\n          ))}\r\n        </SelectItems>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CustomSelect;\r\n","import React from 'react';\r\nimport CustomSelect from './CustomSelect';\r\n\r\nfunction App() {\r\n  const options = ['banana','apple','orange','cherry','mango','watermelon','kiwi','pear'];\r\n\r\n  return (\r\n    <CustomSelect options={options} label={'Choose a fruit: '} uniqueId={Math.ceil(Math.random() * 100)}></CustomSelect>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}